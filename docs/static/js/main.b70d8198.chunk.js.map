{"version":3,"sources":["components/Filters.js","components/Modal.js","components/CharacterList.js","App.js","serviceWorker.js","index.js"],"names":["Filters","props","searchCharacter","getCharacters","className","htmlFor","type","name","placeholder","onChange","onClick","Modal","handleClose","show","character","showHideClassName","id","comics","available","series","stories","CharacterList","openModal","setState","selectedCharacter","hideModal","state","bind","this","characters","loading","Fragment","map","i","key","src","thumbnail","path","alt","description","React","Component","App","characterQuery","url","fetch","then","response","json","data","results","event","searchedCharacter","currentTarget","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b70d8198.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Filters.scss';\n\nconst Filters = props => {\n  const {searchCharacter, getCharacters} = props;\n  return (\n    <form className=\"header__form\">\n      <label htmlFor=\"form-name\">\n        <input \n          type=\"text\" \n          name=\"form-name\"\n          className=\"form-name__input\" \n          placeholder=\"Character Name\" \n          onChange={searchCharacter}   \n        />\n      </label>\n      <i className=\"fas fa-search\" onClick={getCharacters}></i>\n    </form>\n  );\n}\n\nexport default Filters;","import React from 'react';\nimport '../styles/Modal.scss';\n\nconst Modal = ({ handleClose, show, character}) => {\n  const showHideClassName = show ? \"modal display-block\" : \"modal display-none\";\n\n  return (\n    <div className={showHideClassName}>\n      <ul className=\"modal__list\">\n        <li><span>Name:</span> {character.name}</li>\n        <li><span>ID:</span> {character.id}</li>\n        <li><span>Comics which feature this character:</span> {character.comics.available}</li>\n        <li><span>Series in which this character appears:</span> {character.series.available}</li>\n        <li><span>Stories in which this character appears:</span> {character.stories.available}</li>       \n        <li><button className=\"modal__list-btn\" onClick={handleClose}>Close</button></li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Modal;","import React from 'react';\nimport Modal from './Modal';\nimport '../styles/CharacterList.scss';\n\nclass CharacterList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      show: false,\n      selectedCharacter: null\n    };\n\n    this.openModal = this.openModal.bind(this);\n  } \n  \n  openModal = (character) => {\n    this.setState({ \n      show: true,\n      selectedCharacter: character \n    }); \n  }\n\n  hideModal = () => {\n    this.setState({ \n      show: false,\n      selectedCharacter: null\n    });\n  };\n\n  render () {\n    const {characters, loading}=this.props;\n\n    if (loading) {\n      return (\n        <div className=\"main__loading\">\n          <p>Search a character</p>\n        </div>\n      );\n    } \n\n    return (\n      <React.Fragment>\n        <ul className=\"main__list\">\n          {characters.map((character, i) => {\n            return (\n              <li className=\"list__card\"key={i}>\n                <div className=\"card__wrapper\">\n                  <img className=\"card__img\" src={`${character.thumbnail.path}/landscape_xlarge.jpg`} alt={`Official art for ${character.name}`}/>\n                  <p className=\"card__name\">{character.name}</p>\n                  <p className=\"card__description\">{character.description}</p>\n                  <button className=\"card__btn\" onClick={() => this.openModal(character)}>View details</button>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n        {this.state.selectedCharacter ? (\n          <Modal\n            show={this.state.show} \n            handleClose={this.hideModal} \n            character={this.state.selectedCharacter} />\n        ) : null}\n      </React.Fragment>\n    )\n  };  \n}\n\nexport default CharacterList;","import React from 'react';\nimport './styles/App.scss';\nimport Filters from './components/Filters';\nimport CharacterList from './components/CharacterList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      characters: [],\n      characterQuery: '',\n      loading: true\n    }\n\n    this.searchCharacter = this.searchCharacter.bind(this);\n    this.getCharacters = this.getCharacters.bind(this);\n\n  }\n\n  getCharacters() {\n    const characterQuery = this.state.characterQuery;\n    const ts = 1;\n    const publicKey = '1e04ec5be07e23c33c7b7b6fb68e3a56';\n    const hash = '933dfdff726f5ca5518a5d8ba3873990';\n    const url = `http://gateway.marvel.com/v1/public/characters?limit=12&nameStartsWith=${characterQuery}&apikey=${publicKey}&ts=${ts}&hash=${hash}`;\n\n    fetch(url).then(response => response.json()).then(data => {\n      this.setState({\n        characters: data.data.results,\n        loading: false\n      })\n    })\n  }\n\n  searchCharacter(event) {\n    const searchedCharacter = event.currentTarget.value;\n    this.setState({\n      characterQuery: searchedCharacter\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <header className=\"app__header\">\n          <h1 className=\"header__title\">Marvel Finder</h1>\n          <h2 className=\"header__subtitle\">Find your favorite Marvel character</h2>\n          <nav className=\"header__nav\">\n            <Filters \n              searchCharacter={this.searchCharacter}\n              getCharacters={this.getCharacters} />\n          </nav>\n        </header>\n        <main className=\"app__main\">\n          <CharacterList\n            characters={this.state.characters} \n            loading={this.state.loading} />\n        </main>\n        <footer className=\"app__footer\">\n          Developed by Alexandra Jara. Data provided by Marvel Â© 2014 Marvel\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}